#ifndef MMU_H
#define MMU_H
#include <stdint.h>
#include <stdbool.h>

enum JOYPAD_INPUTS {
	JOYPAD_RIGHT,
	JOYPAD_LEFT,
	JOYPAD_UP,
	JOYPAD_DOWN,
	JOYPAD_A,
	JOYPAD_B,
	JOYPAD_SELECT,
	JOYPAD_START
};

extern bool mmu_joypad_inputs[8];

enum special_address {
	CARTRIDGE_TYPE = 0x0147,
	CARTRIDGE_SIZE = 0x0148,
	JOYPAD_INPUT = 0xFF00,
	SERIAL_DATA = 0xFF01,
	SERIAL_CONTROL = 0xFF02,
	TIMER_DIVIDER = 0xFF04,
	TIMER_COUNTER = 0xFF05,
	TIMER_MODULO = 0xFF06,
	TIMER_CONTROL = 0xFF07,
	INTERRUPT_FLAGS = 0xFF0F,
	BOOT_ROM_CONTROL = 0xFF50,
	INTERRUPT_ENABLE = 0xFFFF,
	LCD_CONTROL = 0xFF40,
	DMA_START = 0xFF46,
	LCD_Y_COORDINATE = 0xFF44,
	BG_SCROLL_Y = 0xFF42,
	BG_SCROLL_X = 0xFF43,
	WIN_SCROLL_Y = 0xFF4A,
	WIN_SCROLL_X = 0xFF4B,
	LCD_STATUS = 0xFF41,
	LY_COMPARE = 0xFF45,
	BG_PALETTE = 0xFF47,
	OBJ0_PALETTE = 0xFF48,
	OBJ1_PALETTE = 0xFF49
};

// The first four nibbles represents the byte address,
// the last nibble represents the bit position within the byte
enum special_bit {
	VBLANK_INTERRUPT_FLAG_BIT = 0xFF0F0,
	LCD_INTERRUPT_FLAG_BIT    = 0xFF0F1,
	TIMER_INTERRUPT_FLAG_BIT  = 0xFF0F2,
	SERIAL_INTERRUPT_FLAG_BIT = 0xFF0F3,
	JOYPAD_INTERRUPT_FLAG_BIT = 0xFF0F4,

	VBLANK_INTERRUPT_ENABLE_BIT = 0xFFFF0,
	LCD_INTERRUPT_ENABLE_BIT    = 0xFFFF1,
	TIMER_INTERRUPT_ENABLE_BIT  = 0xFFFF2,
	SERIAL_INTERRUPT_ENABLE_BIT = 0xFFFF3,
	JOYPAD_INTERRUPT_ENABLE_BIT = 0xFFFF4,

	TIMER_CONTROL_ENABLE_BIT = 0xFF072,

	BG_ENABLE         = 0xFF400,
	OBJECTS_ENABLE    = 0xFF401,
	OBJECTS_SIZE      = 0xFF402,
	BG_TILE_MAP_AREA  = 0xFF403,
	BG_TILE_DATA_AREA = 0xFF404,
	WINDOW_ENABLE     = 0xFF405,
	WINDOW_TILE_MAP_AREA = 0xFF406,
	PPU_ENABLED       = 0xFF407,

	JOYPAD_BUTTON0        = 0xFF000,
	JOYPAD_BUTTON1        = 0xFF001,
	JOYPAD_BUTTON2        = 0xFF002,
	JOYPAD_BUTTON3        = 0xFF003,
	JOYPAD_SELECT_DPAD    = 0xFF004,
	JOYPAD_SELECT_BUTTONS = 0xFF005,

	LY_EQUALS_LYC = 0xFF412,
	HBLANK_INTERRUPT_SELECT = 0xFF413,
	VBLANK_INTERRUPT_SELECT = 0xFF414,
	OAM_SCAN_INTERRUPT_SELECT = 0xFF415,
	LYC_INTERRUPT_SELECT = 0xFF416,
};

void mmu_load_rom(char* rom_name);
void mmu_free_rom();

uint8_t mmu_read(uint16_t address);
void mmu_write(uint16_t address, uint8_t value);

void mmu_set_bit(enum special_bit bit);
bool mmu_get_bit(enum special_bit bit);
void mmu_clear_bit(enum special_bit bit);

#endif
